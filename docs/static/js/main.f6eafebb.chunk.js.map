{"version":3,"sources":["Form/index.js","Table/index.js","App.js","index.js"],"names":["InitialForm","id","date","Date","km","Form","onAddRow","useState","form","setForm","style","margin","width","onSubmit","e","preventDefault","className","display","flexDirection","type","data-date","data-date-format","value","name","onChange","target","length","prev","required","borderRadius","marginTop","defaultProps","close","icon","faWindowClose","pencil","faPencilAlt","Table","table","setTable","checkedLines","setCheckedLines","useCallback","newTable","exists","forEach","item","map","parseInt","uuid","sort","a","b","onDeleteRow","filter","handleCheckLine","prevList","find","o","f","onEditRow","event","line","newValue","fieldName","oldList","index","textAlign","height","border","scope","align","isCheckedLine","includes","backgroundColor","defaultValue","console","log","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6eafebb.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst InitialForm = {\r\n    id:\"\",\r\n    date: new Date(),\r\n    km: '',\r\n  }\r\n\r\nconst Form = ({onAddRow}) => {\r\n  const [form, setForm] = useState(InitialForm);\r\n  \r\n\r\n  const onFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    onAddRow(form);\r\n    setForm(InitialForm);\r\n    \r\n  }\r\n\r\n  const onFieldChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setForm((prev) => ({ ...prev, [name]: value }));\r\n  }\r\n\r\n  return (\r\n    <div style={{margin:\"20px 20px\", width: '500px' }} >\r\n    <div >\r\n  \r\n    <form onSubmit={onFormSubmit} className = \"container\">\r\n      <div className=\"form row\" style={{display:'flex', flexDirection:\"row\"}} >\r\n        <div className=\"col\">\r\n          <label>Дата (мм-дд-гггг) </label>\r\n          <input\r\n            type=\"date\"\r\n            data-date=\"\" \r\n            data-date-format=\"DD MMMM YYYY\"\r\n            value={form.date}\r\n            id=\"date\"\r\n            name=\"date\"\r\n            onChange={(e) => {\r\n                  const { name, value } = e.target;\r\n                  if (e.target.value.length > 10) {\r\n                    setForm((prev) => ({ ...prev, [name]: \"Error\" }));\r\n                  } else {\r\n                    setForm((prev) => ({ ...prev, [name]: value }));\r\n                  }\r\n                }}\r\n            required\r\n            style={{borderRadius:\"6px\"}}\r\n          />\r\n        </div>\r\n        <div className=\"col\">\r\n          <label>Пройдено км (число) </label>\r\n          <input \r\n          value={form.km} \r\n          id=\"km\" \r\n          name=\"km\" \r\n          type=\"number\"\r\n          onChange={onFieldChange} \r\n          required\r\n          style={{borderRadius:\"6px\"}}\r\n\r\n          />\r\n        </div>\r\n        <div className=\"col\">\r\n        <button className=\"btn btn-secondary\" style={{marginTop:'20px'}}>OK</button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n    </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nForm.propTypes = {\r\n  onAddRow: PropTypes.func,\r\n};\r\n\r\nForm.defaultProps = {\r\n  onAddRow: () => {},\r\n};\r\n\r\n\r\nexport default Form;\r\n","import Form from \"../Form\";\r\nimport uuid from \"react-uuid\";\r\nimport { useState, useCallback } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faWindowClose } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst close = <FontAwesomeIcon icon={faWindowClose} />;\r\nconst pencil = <FontAwesomeIcon icon={faPencilAlt} />;\r\n\r\nconst Table = () => {\r\n  const [table, setTable] = useState([]);\r\n  const [checkedLines, setCheckedLines] = useState([]);\r\n\r\n  const onAddRow = useCallback(\r\n    (form) => {\r\n      let newTable = [];\r\n\r\n      let exists = false;\r\n\r\n      table.forEach((item) => {\r\n        if (item.date === form.date) {\r\n          exists = true;\r\n        }\r\n      });\r\n\r\n      if (exists) {\r\n        newTable = table.map((item) => {\r\n          if (item.date === form.date) {\r\n            item.km = parseInt(form.km) + parseInt(item.km);\r\n          }\r\n          return item;\r\n        });\r\n      } else {\r\n        newTable = [\r\n          ...table,\r\n          {\r\n            id: uuid(),\r\n            date: form.date,\r\n            km: form.km,\r\n          },\r\n        ];\r\n      }\r\n\r\n      newTable.sort((a, b) => (a.date > b.date ? 1 : b.date > a.date ? -1 : 0));\r\n\r\n      setTable(newTable);\r\n    },\r\n    [table, setTable]\r\n  );\r\n\r\n  const onDeleteRow = useCallback(\r\n    (id) => {\r\n      const newTable = table.filter((item) => item.id !== id);\r\n\r\n      setTable(newTable);\r\n    },\r\n    [table, setTable]\r\n  );\r\n\r\n  const handleCheckLine = useCallback(\r\n    (item) => {\r\n      setCheckedLines((prevList) => {\r\n        if (prevList.find((o) => o === item.id)) {\r\n          return prevList.filter((f) => f !== item.id);\r\n        } else {\r\n          return [...prevList, item.id];\r\n        }\r\n      });\r\n    },\r\n    [setCheckedLines]\r\n  );\r\n\r\n  const onEditRow = useCallback((event, line) => {\r\n    const newValue = event.target.value;\r\n    const fieldName = event.target.name;\r\n    setTable((oldList) => {\r\n      return oldList.map((item, index) => {\r\n        if (index === line) {\r\n          return { ...item, [fieldName]: newValue };\r\n        } else {\r\n          return item;\r\n        }\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Form onAddRow={onAddRow} />\r\n      <div\r\n        className=\"table\"\r\n        style={{\r\n          textAlign: \"center\",\r\n          margin: \"10px 10px\",\r\n          borderRadius: \"15px\",\r\n          height: \"80vh\",\r\n          width: \"600px\",\r\n        }}\r\n      >\r\n        <table>\r\n          <thead>\r\n            <tr className=\"row\" style={{ border: \"none\" }}>\r\n              <th\r\n                scope=\"col\"\r\n                align=\"center\"\r\n                className=\"col\"\r\n                style={{ width: \"120px\" }}\r\n              >\r\n                Дата\r\n              </th>\r\n              <th\r\n                scope=\"col\"\r\n                align=\"center\"\r\n                className=\"col\"\r\n                style={{ width: \"120px\" }}\r\n              >\r\n                Расстояние\r\n              </th>\r\n              <th\r\n                scope=\"col\"\r\n                align=\"center\"\r\n                className=\"col\"\r\n                style={{ width: \"120px\" }}\r\n              >\r\n                Изменить\r\n              </th>\r\n              <th\r\n                scope=\"col\"\r\n                align=\"center\"\r\n                className=\"col\"\r\n                style={{ width: \"120px\" }}\r\n              >\r\n                Удалить\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {table.map((item, index) => {\r\n              const isCheckedLine = checkedLines.includes(item.id);\r\n              return (\r\n                <tr\r\n                  className=\"row table-tr\"\r\n                  key={item.id}\r\n                  style={{\r\n                    backgroundColor: isCheckedLine ? \"yellow\" : \"transparent\",\r\n                    border: \"none\",\r\n                    width:'500px',\r\n                    margin:\"10px 10px\"\r\n                  }}\r\n                >\r\n                  <th scope=\"row\"></th>\r\n                  <td className=\"col\" style={{ width: \"120px\" }}>\r\n                    {isCheckedLine ? (\r\n                      <input\r\n                        type=\"date\"\r\n                        name={\"date\"}\r\n                        defaultValue={item.date}\r\n                        onChange={(event) => (event.target.value.length > 10 ? console.log(\"error\") : onEditRow(event, index)) }\r\n                      />\r\n                    ) : (\r\n                      item.date\r\n                    )}\r\n                  </td>\r\n                  <td className=\"col\" style={{ width: \"120px\" }}>\r\n                    {isCheckedLine ? (\r\n                      <input\r\n                        type=\"number\"\r\n                        name={\"km\"}\r\n                        defaultValue={item.km}\r\n                        onChange={(event) => onEditRow(event, index)}\r\n                      />\r\n                    ) : (\r\n                      item.km\r\n                    )}\r\n                  </td>\r\n                  <td className=\"col\" style={{ width: \"120px\" }}>\r\n                    <button onClick={() => handleCheckLine(item)}>\r\n                      {pencil}\r\n                    </button>\r\n                  </td>\r\n                  <td className=\"col\" style={{ width: \"120px\" }}>\r\n                    <button onClick={() => onDeleteRow(item.id)}>\r\n                      {close}\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","\r\nimport './App.css';\r\nimport Table from './Table';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className = \"App\">\r\n    <Table/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}